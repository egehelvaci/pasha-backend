generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserType {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  email       String   @unique
  name        String
  createdAt   DateTime @default(now()) @map("created_at")
  credit      Decimal  @default(0) @db.Decimal(10, 2)
  debit       Decimal  @default(0) @db.Decimal(10, 2)
  isActive    Boolean  @default(true) @map("is_active")
  password    String
  phoneNumber String?  @map("phone_number")
  surname     String
  userId      String   @id @default(uuid()) @map("user_id")
  username    String   @unique
  userTypeId  Int      @map("user_type_id")
  store_id    String?  @db.Uuid
  userType    UserType @relation(fields: [userTypeId], references: [id])
  Store       Store?   @relation(fields: [store_id], references: [store_id], onUpdate: NoAction, map: "fk_user_store")
  carts       carts[]
}

model Collection {
  collectionId    String            @id @default(uuid()) @map("collection_id")
  name            String
  description     String?
  code            String            @unique
  isActive        Boolean           @default(true) @map("is_active")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  PriceListDetail PriceListDetail[]
  products        Product[]
}

model Product {
  productId         String              @id @default(uuid()) @map("product_id")
  name              String
  description       String
  productImage      String?             @map("product_imageurl")
  collectionId      String              @map("collection_id")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  rule_id           Int?
  collection        Collection          @relation(fields: [collectionId], references: [collectionId])
  productrules      productrules?       @relation(fields: [rule_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart_items        cart_items[]
  productvariations productvariations[]
}

model PriceList {
  price_list_id   String            @id @default(dbgenerated("gen_random_uuid()"))
  name            String            @db.VarChar(255)
  description     String?
  is_default      Boolean           @default(false)
  valid_from      DateTime?         @db.Timestamp(6)
  valid_to        DateTime?         @db.Timestamp(6)
  limit_amount    Decimal?          @db.Decimal(10, 2)
  currency        String            @db.VarChar(3)
  is_active       Boolean           @default(true)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  PriceListDetail PriceListDetail[]
  StorePriceList  StorePriceList[]
}

model PriceListDetail {
  price_list_detail_id   String     @id @default(dbgenerated("gen_random_uuid()"))
  price_list_id          String
  collection_id          String
  price_per_square_meter Decimal    @db.Decimal(10, 2)
  created_at             DateTime   @default(now()) @db.Timestamp(6)
  updated_at             DateTime   @default(now()) @db.Timestamp(6)
  Collection             Collection @relation(fields: [collection_id], references: [collectionId], onDelete: Cascade, onUpdate: NoAction)
  PriceList              PriceList  @relation(fields: [price_list_id], references: [price_list_id], onDelete: NoAction, onUpdate: NoAction)
}

model Store {
  store_id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kurum_adi           String           @db.VarChar(255)
  vergi_numarasi      String?          @db.VarChar(20)
  vergi_dairesi       String?          @db.VarChar(100)
  yetkili_adi         String?          @db.VarChar(100)
  yetkili_soyadi      String?          @db.VarChar(100)
  telefon             String?          @db.VarChar(20)
  eposta              String?          @db.VarChar(255)
  adres               String?
  faks_numarasi       String?          @db.VarChar(20)
  aciklama            String?
  limitsiz_acik_hesap Boolean?         @default(false)
  acik_hesap_tutari   Decimal?         @default(0) @db.Decimal(15, 2)
  is_active           Boolean?         @default(true)
  created_at          DateTime?        @default(now()) @db.Timestamp(6)
  updated_at          DateTime?        @default(now()) @db.Timestamp(6)
  StorePriceList      StorePriceList[]
  User                User[]
}

model StorePriceList {
  store_price_list_id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  store_id            String    @db.Uuid
  price_list_id       String
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
  PriceList           PriceList @relation(fields: [price_list_id], references: [price_list_id], onDelete: Cascade)
  Store               Store     @relation(fields: [store_id], references: [store_id], onDelete: Cascade)

  @@unique([store_id, price_list_id])
}

model cuttypes {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(50)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @default(now()) @db.Timestamp(6)
  productrulecuttypes productrulecuttypes[]
  productvariations   productvariations[]
}

model productrulecuttypes {
  rule_id      Int
  cut_type_id  Int
  cuttypes     cuttypes     @relation(fields: [cut_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  productrules productrules @relation(fields: [rule_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([rule_id, cut_type_id])
}

model productrules {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(100)
  can_have_fringe     Boolean
  description         String?
  is_active           Boolean?              @default(true)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @default(now()) @db.Timestamp(6)
  Product             Product[]
  productrulecuttypes productrulecuttypes[]
  productsizeoptions  productsizeoptions[]
}

model productsizeoptions {
  id                 Int           @id @default(autoincrement())
  rule_id            Int?
  width              Int
  height             Int
  is_optional_height Boolean?      @default(false)
  created_at         DateTime?     @default(now()) @db.Timestamp(6)
  updated_at         DateTime?     @default(now()) @db.Timestamp(6)
  productrules       productrules? @relation(fields: [rule_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([rule_id, width, height, is_optional_height])
}

model productvariations {
  id             Int       @id @default(autoincrement())
  product_id     String?   @db.VarChar(255)
  cut_type_id    Int?
  has_fringe     Boolean   @default(false)
  width          Int
  height         Int
  stock_quantity Int       @default(0)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  cuttypes       cuttypes? @relation(fields: [cut_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Product        Product?  @relation(fields: [product_id], references: [productId], onDelete: Cascade, onUpdate: NoAction)

  @@unique([product_id, cut_type_id, has_fringe, width, height])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model cart_items {
  id          Int            @id @default(autoincrement())
  cart_id     Int
  product_id  String         @db.VarChar(36)
  quantity    Int            @default(1)
  width       Decimal        @db.Decimal(8, 2)
  height      Decimal        @db.Decimal(8, 2)
  area_m2     Decimal        @db.Decimal(10, 2)
  unit_price  Decimal        @db.Decimal(10, 2)
  total_price Decimal        @db.Decimal(12, 2)
  has_fringe  Boolean?       @default(false)
  cut_type    cut_type_enum? @default(rectangle)
  notes       String?
  created_at  DateTime?      @default(now()) @db.Timestamp(6)
  updated_at  DateTime?      @default(now()) @db.Timestamp(6)
  carts       carts          @relation(fields: [cart_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Product     Product        @relation(fields: [product_id], references: [productId], onDelete: Cascade, onUpdate: NoAction)

  @@index([cart_id], map: "idx_cart_items_cart_id")
  @@index([cart_id, product_id], map: "idx_cart_items_composite")
  @@index([product_id], map: "idx_cart_items_product_id")
}

model carts {
  id         Int          @id @default(autoincrement())
  user_id    String       @db.VarChar(36)
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  is_active  Boolean?     @default(true)
  cart_items cart_items[]
  User       User         @relation(fields: [user_id], references: [userId], onDelete: Cascade, onUpdate: NoAction)

  @@index([updated_at], map: "idx_carts_updated_at")
  @@index([user_id, is_active], map: "idx_carts_user_active")
  @@index([user_id], map: "idx_carts_user_id")
}

enum Currency {
  TRY
  USD
  EUR
}

enum cut_type_enum {
  rectangle
  round
  oval
  custom
}
